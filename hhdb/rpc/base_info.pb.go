// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: hhdb/rpc/base_info.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 数据值类型
type ValueType int32

const (
	ValueType_kVtBool      ValueType = 0  // true 或 false 的二进制值
	ValueType_kVtFloat     ValueType = 1  //32 位实数值浮点型 IEEE-754 标准定义
	ValueType_kVtDouble    ValueType = 2  //64 位实数值双精度 IEEE-754 标准定义
	ValueType_kVtChar      ValueType = 3  // 有符号的 8 位整数数据
	ValueType_kVtByte      ValueType = 4  //无符号的 8 位整数数据
	ValueType_kVtShort     ValueType = 5  //有符号的 16 位整数数据
	ValueType_kVtWord      ValueType = 6  //无符号的 16 位整数数据
	ValueType_kVtInt       ValueType = 7  //有符号的 32 位整数数据
	ValueType_kVtDword     ValueType = 8  // 无符号的 32 位整数数据
	ValueType_kVtLong      ValueType = 9  //有符号的 64 位整数数据
	ValueType_kVtQword     ValueType = 10 //无符号的 64 位整数数据
	ValueType_kVtString    ValueType = 11 //字符串
	ValueType_kVtBoolArr   ValueType = 12 //bool数组
	ValueType_kVtFloatArr  ValueType = 13 //32 位实数值浮点型数组
	ValueType_kVtDoubleArr ValueType = 14 //64 位实数值浮点型数组
	ValueType_kVtCharArr   ValueType = 15 //char数组
	ValueType_kVtByteArr   ValueType = 16 //byte数组
	ValueType_kVtShortArr  ValueType = 17 //short数组
	ValueType_kVtWordArr   ValueType = 18 //word数组
	ValueType_kVtIntArr    ValueType = 19 //有符号的 32 位整数数据数组
	ValueType_kVtDwordArr  ValueType = 20 //无符号的 32 位整数数据数组
	ValueType_kVtLongArr   ValueType = 21 //有符号的 64 位整数数据数组
	ValueType_kVtQwordArr  ValueType = 22 //无符号的 64 位整数数据数组
	ValueType_kVtStringArr ValueType = 23 //字符串数组
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0:  "kVtBool",
		1:  "kVtFloat",
		2:  "kVtDouble",
		3:  "kVtChar",
		4:  "kVtByte",
		5:  "kVtShort",
		6:  "kVtWord",
		7:  "kVtInt",
		8:  "kVtDword",
		9:  "kVtLong",
		10: "kVtQword",
		11: "kVtString",
		12: "kVtBoolArr",
		13: "kVtFloatArr",
		14: "kVtDoubleArr",
		15: "kVtCharArr",
		16: "kVtByteArr",
		17: "kVtShortArr",
		18: "kVtWordArr",
		19: "kVtIntArr",
		20: "kVtDwordArr",
		21: "kVtLongArr",
		22: "kVtQwordArr",
		23: "kVtStringArr",
	}
	ValueType_value = map[string]int32{
		"kVtBool":      0,
		"kVtFloat":     1,
		"kVtDouble":    2,
		"kVtChar":      3,
		"kVtByte":      4,
		"kVtShort":     5,
		"kVtWord":      6,
		"kVtInt":       7,
		"kVtDword":     8,
		"kVtLong":      9,
		"kVtQword":     10,
		"kVtString":    11,
		"kVtBoolArr":   12,
		"kVtFloatArr":  13,
		"kVtDoubleArr": 14,
		"kVtCharArr":   15,
		"kVtByteArr":   16,
		"kVtShortArr":  17,
		"kVtWordArr":   18,
		"kVtIntArr":    19,
		"kVtDwordArr":  20,
		"kVtLongArr":   21,
		"kVtQwordArr":  22,
		"kVtStringArr": 23,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_hhdb_rpc_base_info_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_hhdb_rpc_base_info_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{0}
}

// 测点类型
type PointType int32

const (
	PointType_kPtSwitch  PointType = 0 //开关量
	PointType_kPtAnalog  PointType = 1 //模拟量
	PointType_kPtPackage PointType = 2 //打包点
)

// Enum value maps for PointType.
var (
	PointType_name = map[int32]string{
		0: "kPtSwitch",
		1: "kPtAnalog",
		2: "kPtPackage",
	}
	PointType_value = map[string]int32{
		"kPtSwitch":  0,
		"kPtAnalog":  1,
		"kPtPackage": 2,
	}
)

func (x PointType) Enum() *PointType {
	p := new(PointType)
	*p = x
	return p
}

func (x PointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointType) Descriptor() protoreflect.EnumDescriptor {
	return file_hhdb_rpc_base_info_proto_enumTypes[1].Descriptor()
}

func (PointType) Type() protoreflect.EnumType {
	return &file_hhdb_rpc_base_info_proto_enumTypes[1]
}

func (x PointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointType.Descriptor instead.
func (PointType) EnumDescriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{1}
}

// 压缩模式
type CompressMode int32

const (
	CompressMode_kCmThreshold CompressMode = 0 //阈值压缩
	CompressMode_kCmLeap      CompressMode = 1 //跳变压缩
	CompressMode_kCmTime      CompressMode = 2 //定时压缩
	CompressMode_kCmLoss      CompressMode = 3 //有损压缩
	CompressMode_kCmNone      CompressMode = 4 //无损压缩
)

// Enum value maps for CompressMode.
var (
	CompressMode_name = map[int32]string{
		0: "kCmThreshold",
		1: "kCmLeap",
		2: "kCmTime",
		3: "kCmLoss",
		4: "kCmNone",
	}
	CompressMode_value = map[string]int32{
		"kCmThreshold": 0,
		"kCmLeap":      1,
		"kCmTime":      2,
		"kCmLoss":      3,
		"kCmNone":      4,
	}
)

func (x CompressMode) Enum() *CompressMode {
	p := new(CompressMode)
	*p = x
	return p
}

func (x CompressMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressMode) Descriptor() protoreflect.EnumDescriptor {
	return file_hhdb_rpc_base_info_proto_enumTypes[2].Descriptor()
}

func (CompressMode) Type() protoreflect.EnumType {
	return &file_hhdb_rpc_base_info_proto_enumTypes[2]
}

func (x CompressMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressMode.Descriptor instead.
func (CompressMode) EnumDescriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{2}
}

type PointStatus int32

const (
	PointStatus_kPsInit             PointStatus = 0  //初始化0-19为好的状态
	PointStatus_kPsGood             PointStatus = 1  //正常,表示测点的值是有效的且在正常范围内。这是最常见的状态
	PointStatus_kPsShowWarnning     PointStatus = 20 //>=20为警告状态
	PointStatus_kPsUncertain        PointStatus = 21 //不确定,表示测点的值可能有效，但存在某种不确定性或不可靠性。这通常用于表示数据质量差、未知状态或临时问题。
	PointStatus_kPsInavtive         PointStatus = 22 //不活动,表示测点当前处于非活动状态，可能是因为设备已停用或者该测点当前不可用。
	PointStatus_kPsQualityIssue     PointStatus = 23 //数据质量问题,表示测点的数据存在质量问题，可能是由于噪声、干扰或其他原因导致的不准确性。
	PointStatus_kPsDataTypeMisMatch PointStatus = 24 //数据类型不匹配
	PointStatus_kPsOutService       PointStatus = 25 //停用,表示测点当前处于停用状态，通常是因为设备维护或其他原因。
	PointStatus_kPsOverRange        PointStatus = 26 //超出范围,表示测点的值超出了其正常范围，通常用于指示测点的测量值超出了可接受的上限。
	PointStatus_kPsUnderRange       PointStatus = 27 //低于范围,表示测点的值低于其正常范围，通常用于指示测点的测量值低于可接受的下限。
	PointStatus_kPsShowError        PointStatus = 80 //>=80为错误状态
	PointStatus_kPsNotFound         PointStatus = 81 //错误,表示测点的值无效或处于错误状态。
	PointStatus_kPsBad              PointStatus = 82 //错误,表示测点的值无效或处于错误状态。
	PointStatus_kPsDeviceFailure    PointStatus = 83 //设备故障,表示测点所关联的设备发生故障，无法提供有效的数据。
	PointStatus_kPsSensorFailure    PointStatus = 84 //传感器故障,表示与测点关联的传感器发生故障，导致无法获得有效的测量数据。
	PointStatus_kPsCommunFailure    PointStatus = 85 //通信故障,表示测点与数据源之间的通信故障，导致无法获取或更新数据。
)

// Enum value maps for PointStatus.
var (
	PointStatus_name = map[int32]string{
		0:  "kPsInit",
		1:  "kPsGood",
		20: "kPsShowWarnning",
		21: "kPsUncertain",
		22: "kPsInavtive",
		23: "kPsQualityIssue",
		24: "kPsDataTypeMisMatch",
		25: "kPsOutService",
		26: "kPsOverRange",
		27: "kPsUnderRange",
		80: "kPsShowError",
		81: "kPsNotFound",
		82: "kPsBad",
		83: "kPsDeviceFailure",
		84: "kPsSensorFailure",
		85: "kPsCommunFailure",
	}
	PointStatus_value = map[string]int32{
		"kPsInit":             0,
		"kPsGood":             1,
		"kPsShowWarnning":     20,
		"kPsUncertain":        21,
		"kPsInavtive":         22,
		"kPsQualityIssue":     23,
		"kPsDataTypeMisMatch": 24,
		"kPsOutService":       25,
		"kPsOverRange":        26,
		"kPsUnderRange":       27,
		"kPsShowError":        80,
		"kPsNotFound":         81,
		"kPsBad":              82,
		"kPsDeviceFailure":    83,
		"kPsSensorFailure":    84,
		"kPsCommunFailure":    85,
	}
)

func (x PointStatus) Enum() *PointStatus {
	p := new(PointStatus)
	*p = x
	return p
}

func (x PointStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hhdb_rpc_base_info_proto_enumTypes[3].Descriptor()
}

func (PointStatus) Type() protoreflect.EnumType {
	return &file_hhdb_rpc_base_info_proto_enumTypes[3]
}

func (x PointStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointStatus.Descriptor instead.
func (PointStatus) EnumDescriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{3}
}

type BoolArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrValue []bool `protobuf:"varint,1,rep,packed,name=arrValue,proto3" json:"arrValue,omitempty"`
}

func (x *BoolArr) Reset() {
	*x = BoolArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolArr) ProtoMessage() {}

func (x *BoolArr) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolArr.ProtoReflect.Descriptor instead.
func (*BoolArr) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{0}
}

func (x *BoolArr) GetArrValue() []bool {
	if x != nil {
		return x.ArrValue
	}
	return nil
}

type FloatArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrValue []float32 `protobuf:"fixed32,1,rep,packed,name=arrValue,proto3" json:"arrValue,omitempty"`
}

func (x *FloatArr) Reset() {
	*x = FloatArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatArr) ProtoMessage() {}

func (x *FloatArr) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatArr.ProtoReflect.Descriptor instead.
func (*FloatArr) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{1}
}

func (x *FloatArr) GetArrValue() []float32 {
	if x != nil {
		return x.ArrValue
	}
	return nil
}

type DoubleArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrValue []float64 `protobuf:"fixed64,1,rep,packed,name=arrValue,proto3" json:"arrValue,omitempty"`
}

func (x *DoubleArr) Reset() {
	*x = DoubleArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleArr) ProtoMessage() {}

func (x *DoubleArr) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleArr.ProtoReflect.Descriptor instead.
func (*DoubleArr) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{2}
}

func (x *DoubleArr) GetArrValue() []float64 {
	if x != nil {
		return x.ArrValue
	}
	return nil
}

type IntArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrValue []int32 `protobuf:"zigzag32,1,rep,packed,name=arrValue,proto3" json:"arrValue,omitempty"`
}

func (x *IntArr) Reset() {
	*x = IntArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntArr) ProtoMessage() {}

func (x *IntArr) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntArr.ProtoReflect.Descriptor instead.
func (*IntArr) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{3}
}

func (x *IntArr) GetArrValue() []int32 {
	if x != nil {
		return x.ArrValue
	}
	return nil
}

type DwordArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrValue []uint32 `protobuf:"varint,1,rep,packed,name=arrValue,proto3" json:"arrValue,omitempty"`
}

func (x *DwordArr) Reset() {
	*x = DwordArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DwordArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DwordArr) ProtoMessage() {}

func (x *DwordArr) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DwordArr.ProtoReflect.Descriptor instead.
func (*DwordArr) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{4}
}

func (x *DwordArr) GetArrValue() []uint32 {
	if x != nil {
		return x.ArrValue
	}
	return nil
}

type LongArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrValue []int64 `protobuf:"zigzag64,1,rep,packed,name=arrValue,proto3" json:"arrValue,omitempty"`
}

func (x *LongArr) Reset() {
	*x = LongArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongArr) ProtoMessage() {}

func (x *LongArr) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongArr.ProtoReflect.Descriptor instead.
func (*LongArr) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{5}
}

func (x *LongArr) GetArrValue() []int64 {
	if x != nil {
		return x.ArrValue
	}
	return nil
}

type QwordArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrValue []uint64 `protobuf:"varint,1,rep,packed,name=arrValue,proto3" json:"arrValue,omitempty"`
}

func (x *QwordArr) Reset() {
	*x = QwordArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QwordArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QwordArr) ProtoMessage() {}

func (x *QwordArr) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QwordArr.ProtoReflect.Descriptor instead.
func (*QwordArr) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{6}
}

func (x *QwordArr) GetArrValue() []uint64 {
	if x != nil {
		return x.ArrValue
	}
	return nil
}

type StringArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrValue [][]byte `protobuf:"bytes,1,rep,name=arrValue,proto3" json:"arrValue,omitempty"`
}

func (x *StringArr) Reset() {
	*x = StringArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArr) ProtoMessage() {}

func (x *StringArr) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArr.ProtoReflect.Descriptor instead.
func (*StringArr) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{7}
}

func (x *StringArr) GetArrValue() [][]byte {
	if x != nil {
		return x.ArrValue
	}
	return nil
}

// 测点数据
type PointValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*PointValue_BoolValue
	//	*PointValue_FloatValue
	//	*PointValue_DoubleValue
	//	*PointValue_IntValue
	//	*PointValue_DwordValue
	//	*PointValue_LongValue
	//	*PointValue_QwordValue
	//	*PointValue_StringValue
	//	*PointValue_BoolArr
	//	*PointValue_FloatArr
	//	*PointValue_DoubleArr
	//	*PointValue_IntArr
	//	*PointValue_DwordArr
	//	*PointValue_LongArr
	//	*PointValue_QwordArr
	//	*PointValue_StringArr
	Value  isPointValue_Value `protobuf_oneof:"value"`
	Mstime uint64             `protobuf:"varint,17,opt,name=mstime,proto3" json:"mstime,omitempty"` //数据utc毫秒时间戳
	Status int32              `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"` //数据值状态
}

func (x *PointValue) Reset() {
	*x = PointValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointValue) ProtoMessage() {}

func (x *PointValue) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointValue.ProtoReflect.Descriptor instead.
func (*PointValue) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{8}
}

func (m *PointValue) GetValue() isPointValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PointValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*PointValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *PointValue) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*PointValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *PointValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*PointValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *PointValue) GetIntValue() int32 {
	if x, ok := x.GetValue().(*PointValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *PointValue) GetDwordValue() uint32 {
	if x, ok := x.GetValue().(*PointValue_DwordValue); ok {
		return x.DwordValue
	}
	return 0
}

func (x *PointValue) GetLongValue() int64 {
	if x, ok := x.GetValue().(*PointValue_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *PointValue) GetQwordValue() uint64 {
	if x, ok := x.GetValue().(*PointValue_QwordValue); ok {
		return x.QwordValue
	}
	return 0
}

func (x *PointValue) GetStringValue() []byte {
	if x, ok := x.GetValue().(*PointValue_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *PointValue) GetBoolArr() *BoolArr {
	if x, ok := x.GetValue().(*PointValue_BoolArr); ok {
		return x.BoolArr
	}
	return nil
}

func (x *PointValue) GetFloatArr() *FloatArr {
	if x, ok := x.GetValue().(*PointValue_FloatArr); ok {
		return x.FloatArr
	}
	return nil
}

func (x *PointValue) GetDoubleArr() *DoubleArr {
	if x, ok := x.GetValue().(*PointValue_DoubleArr); ok {
		return x.DoubleArr
	}
	return nil
}

func (x *PointValue) GetIntArr() *IntArr {
	if x, ok := x.GetValue().(*PointValue_IntArr); ok {
		return x.IntArr
	}
	return nil
}

func (x *PointValue) GetDwordArr() *DwordArr {
	if x, ok := x.GetValue().(*PointValue_DwordArr); ok {
		return x.DwordArr
	}
	return nil
}

func (x *PointValue) GetLongArr() *LongArr {
	if x, ok := x.GetValue().(*PointValue_LongArr); ok {
		return x.LongArr
	}
	return nil
}

func (x *PointValue) GetQwordArr() *QwordArr {
	if x, ok := x.GetValue().(*PointValue_QwordArr); ok {
		return x.QwordArr
	}
	return nil
}

func (x *PointValue) GetStringArr() *StringArr {
	if x, ok := x.GetValue().(*PointValue_StringArr); ok {
		return x.StringArr
	}
	return nil
}

func (x *PointValue) GetMstime() uint64 {
	if x != nil {
		return x.Mstime
	}
	return 0
}

func (x *PointValue) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type isPointValue_Value interface {
	isPointValue_Value()
}

type PointValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=boolValue,proto3,oneof"`
}

type PointValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=floatValue,proto3,oneof"`
}

type PointValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=doubleValue,proto3,oneof"`
}

type PointValue_IntValue struct {
	IntValue int32 `protobuf:"zigzag32,4,opt,name=intValue,proto3,oneof"`
}

type PointValue_DwordValue struct {
	DwordValue uint32 `protobuf:"varint,5,opt,name=dwordValue,proto3,oneof"`
}

type PointValue_LongValue struct {
	LongValue int64 `protobuf:"zigzag64,6,opt,name=longValue,proto3,oneof"`
}

type PointValue_QwordValue struct {
	QwordValue uint64 `protobuf:"varint,7,opt,name=qwordValue,proto3,oneof"`
}

type PointValue_StringValue struct {
	StringValue []byte `protobuf:"bytes,8,opt,name=stringValue,proto3,oneof"`
}

type PointValue_BoolArr struct {
	BoolArr *BoolArr `protobuf:"bytes,9,opt,name=boolArr,proto3,oneof"`
}

type PointValue_FloatArr struct {
	FloatArr *FloatArr `protobuf:"bytes,10,opt,name=floatArr,proto3,oneof"`
}

type PointValue_DoubleArr struct {
	DoubleArr *DoubleArr `protobuf:"bytes,11,opt,name=doubleArr,proto3,oneof"`
}

type PointValue_IntArr struct {
	IntArr *IntArr `protobuf:"bytes,12,opt,name=intArr,proto3,oneof"`
}

type PointValue_DwordArr struct {
	DwordArr *DwordArr `protobuf:"bytes,13,opt,name=dwordArr,proto3,oneof"`
}

type PointValue_LongArr struct {
	LongArr *LongArr `protobuf:"bytes,14,opt,name=longArr,proto3,oneof"`
}

type PointValue_QwordArr struct {
	QwordArr *QwordArr `protobuf:"bytes,15,opt,name=qwordArr,proto3,oneof"`
}

type PointValue_StringArr struct {
	StringArr *StringArr `protobuf:"bytes,16,opt,name=stringArr,proto3,oneof"`
}

func (*PointValue_BoolValue) isPointValue_Value() {}

func (*PointValue_FloatValue) isPointValue_Value() {}

func (*PointValue_DoubleValue) isPointValue_Value() {}

func (*PointValue_IntValue) isPointValue_Value() {}

func (*PointValue_DwordValue) isPointValue_Value() {}

func (*PointValue_LongValue) isPointValue_Value() {}

func (*PointValue_QwordValue) isPointValue_Value() {}

func (*PointValue_StringValue) isPointValue_Value() {}

func (*PointValue_BoolArr) isPointValue_Value() {}

func (*PointValue_FloatArr) isPointValue_Value() {}

func (*PointValue_DoubleArr) isPointValue_Value() {}

func (*PointValue_IntArr) isPointValue_Value() {}

func (*PointValue_DwordArr) isPointValue_Value() {}

func (*PointValue_LongArr) isPointValue_Value() {}

func (*PointValue_QwordArr) isPointValue_Value() {}

func (*PointValue_StringArr) isPointValue_Value() {}

// 测点全量信息
type PointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId        int32             `protobuf:"varint,1,opt,name=pointId,proto3" json:"pointId,omitempty"`                                                                                               //测点ID，为>=0的整数
	PointName      string            `protobuf:"bytes,2,opt,name=pointName,proto3" json:"pointName,omitempty"`                                                                                            //测点名,携带通道标识,全局唯一
	PointShowName  string            `protobuf:"bytes,3,opt,name=pointShowName,proto3" json:"pointShowName,omitempty"`                                                                                    //页面展示测点名
	PointUnit      string            `protobuf:"bytes,4,opt,name=pointUnit,proto3" json:"pointUnit,omitempty"`                                                                                            //测点单位
	PointDesc      string            `protobuf:"bytes,5,opt,name=pointDesc,proto3" json:"pointDesc,omitempty"`                                                                                            //测点描述
	PointType      int32             `protobuf:"varint,6,opt,name=pointType,proto3" json:"pointType,omitempty"`                                                                                           //测点类型
	WriteEnable    bool              `protobuf:"varint,7,opt,name=writeEnable,proto3" json:"writeEnable,omitempty"`                                                                                       //是否可写
	CheckEnable    bool              `protobuf:"varint,8,opt,name=checkEnable,proto3" json:"checkEnable,omitempty"`                                                                                       //是否进行值校验
	LowerThreshold float64           `protobuf:"fixed64,9,opt,name=lowerThreshold,proto3" json:"lowerThreshold,omitempty"`                                                                                //低限阈值
	UpperThreshold float64           `protobuf:"fixed64,10,opt,name=upperThreshold,proto3" json:"upperThreshold,omitempty"`                                                                               //高限阈值
	ValueOffset    float64           `protobuf:"fixed64,11,opt,name=valueOffset,proto3" json:"valueOffset,omitempty"`                                                                                     //数据偏移量
	ValueRate      float64           `protobuf:"fixed64,12,opt,name=valueRate,proto3" json:"valueRate,omitempty"`                                                                                         //数据倍率
	CompressMode   int32             `protobuf:"varint,13,opt,name=compressMode,proto3" json:"compressMode,omitempty"`                                                                                    //压缩模式
	CompressParam1 float64           `protobuf:"fixed64,14,opt,name=compressParam1,proto3" json:"compressParam1,omitempty"`                                                                               //压缩备用参数1
	CompressParam2 float64           `protobuf:"fixed64,15,opt,name=compressParam2,proto3" json:"compressParam2,omitempty"`                                                                               //压缩备用参数2
	OuttimeDay     int32             `protobuf:"varint,16,opt,name=outtimeDay,proto3" json:"outtimeDay,omitempty"`                                                                                        //超时时间（单位：天）=0则不启用，>0为对应的超时时间，<0代表仅缓存实时数据不存储历史数据
	ValueType      int32             `protobuf:"varint,17,opt,name=valueType,proto3" json:"valueType,omitempty"`                                                                                          //测点值类型
	TableId        int32             `protobuf:"varint,18,opt,name=tableId,proto3" json:"tableId,omitempty"`                                                                                              //点组ID
	CreateTime     uint64            `protobuf:"varint,19,opt,name=createTime,proto3" json:"createTime,omitempty"`                                                                                        //测点创建时间
	ExtraField     map[string]string `protobuf:"bytes,20,rep,name=extraField,proto3" json:"extraField,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //自定义的拓展字段
}

func (x *PointInfo) Reset() {
	*x = PointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointInfo) ProtoMessage() {}

func (x *PointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointInfo.ProtoReflect.Descriptor instead.
func (*PointInfo) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{9}
}

func (x *PointInfo) GetPointId() int32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *PointInfo) GetPointName() string {
	if x != nil {
		return x.PointName
	}
	return ""
}

func (x *PointInfo) GetPointShowName() string {
	if x != nil {
		return x.PointShowName
	}
	return ""
}

func (x *PointInfo) GetPointUnit() string {
	if x != nil {
		return x.PointUnit
	}
	return ""
}

func (x *PointInfo) GetPointDesc() string {
	if x != nil {
		return x.PointDesc
	}
	return ""
}

func (x *PointInfo) GetPointType() int32 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *PointInfo) GetWriteEnable() bool {
	if x != nil {
		return x.WriteEnable
	}
	return false
}

func (x *PointInfo) GetCheckEnable() bool {
	if x != nil {
		return x.CheckEnable
	}
	return false
}

func (x *PointInfo) GetLowerThreshold() float64 {
	if x != nil {
		return x.LowerThreshold
	}
	return 0
}

func (x *PointInfo) GetUpperThreshold() float64 {
	if x != nil {
		return x.UpperThreshold
	}
	return 0
}

func (x *PointInfo) GetValueOffset() float64 {
	if x != nil {
		return x.ValueOffset
	}
	return 0
}

func (x *PointInfo) GetValueRate() float64 {
	if x != nil {
		return x.ValueRate
	}
	return 0
}

func (x *PointInfo) GetCompressMode() int32 {
	if x != nil {
		return x.CompressMode
	}
	return 0
}

func (x *PointInfo) GetCompressParam1() float64 {
	if x != nil {
		return x.CompressParam1
	}
	return 0
}

func (x *PointInfo) GetCompressParam2() float64 {
	if x != nil {
		return x.CompressParam2
	}
	return 0
}

func (x *PointInfo) GetOuttimeDay() int32 {
	if x != nil {
		return x.OuttimeDay
	}
	return 0
}

func (x *PointInfo) GetValueType() int32 {
	if x != nil {
		return x.ValueType
	}
	return 0
}

func (x *PointInfo) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *PointInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PointInfo) GetExtraField() map[string]string {
	if x != nil {
		return x.ExtraField
	}
	return nil
}

type OperatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime   uint64 `protobuf:"varint,1,opt,name=createTime,proto3" json:"createTime,omitempty"`     //数据库创建时间
	UpdateTime   uint64 `protobuf:"varint,2,opt,name=updateTime,proto3" json:"updateTime,omitempty"`     //数据库最后更新时间
	CreateUserId uint32 `protobuf:"varint,3,opt,name=createUserId,proto3" json:"createUserId,omitempty"` //创建作者信息
	UpdateUserId uint32 `protobuf:"varint,4,opt,name=updateUserId,proto3" json:"updateUserId,omitempty"` //更新作者信息
}

func (x *OperatorInfo) Reset() {
	*x = OperatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorInfo) ProtoMessage() {}

func (x *OperatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorInfo.ProtoReflect.Descriptor instead.
func (*OperatorInfo) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{10}
}

func (x *OperatorInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *OperatorInfo) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *OperatorInfo) GetCreateUserId() uint32 {
	if x != nil {
		return x.CreateUserId
	}
	return 0
}

func (x *OperatorInfo) GetUpdateUserId() uint32 {
	if x != nil {
		return x.UpdateUserId
	}
	return 0
}

// 点组信息
type TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId           int32             `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`                                                                                                            //表ID
	TableName         string            `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`                                                                                                         //表名
	TableShowName     string            `protobuf:"bytes,3,opt,name=tableShowName,proto3" json:"tableShowName,omitempty"`                                                                                                 //表描述
	TableParentId     int32             `protobuf:"varint,4,opt,name=tableParentId,proto3" json:"tableParentId,omitempty"`                                                                                                //父节点ID
	TableRemark       string            `protobuf:"bytes,5,opt,name=tableRemark,proto3" json:"tableRemark,omitempty"`                                                                                                     //表备注
	ExtraFiledAndDesc map[string][]byte `protobuf:"bytes,6,rep,name=extraFiledAndDesc,proto3" json:"extraFiledAndDesc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //表中其他属性
	OperatorInfo      *OperatorInfo     `protobuf:"bytes,7,opt,name=operatorInfo,proto3" json:"operatorInfo,omitempty"`                                                                                                   //用户操作信息
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{11}
}

func (x *TableInfo) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableInfo) GetTableShowName() string {
	if x != nil {
		return x.TableShowName
	}
	return ""
}

func (x *TableInfo) GetTableParentId() int32 {
	if x != nil {
		return x.TableParentId
	}
	return 0
}

func (x *TableInfo) GetTableRemark() string {
	if x != nil {
		return x.TableRemark
	}
	return ""
}

func (x *TableInfo) GetExtraFiledAndDesc() map[string][]byte {
	if x != nil {
		return x.ExtraFiledAndDesc
	}
	return nil
}

func (x *TableInfo) GetOperatorInfo() *OperatorInfo {
	if x != nil {
		return x.OperatorInfo
	}
	return nil
}

var File_hhdb_rpc_base_info_proto protoreflect.FileDescriptor

var file_hhdb_rpc_base_info_proto_rawDesc = []byte{
	0x0a, 0x18, 0x68, 0x68, 0x64, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x68, 0x64, 0x62,
	0x2e, 0x72, 0x70, 0x63, 0x22, 0x25, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x09, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x06,
	0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x44, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x07, 0x4c, 0x6f,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x12, 0x52, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x26, 0x0a, 0x08, 0x51, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x09, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x72, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdb, 0x05, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x77, 0x6f,
	0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x71, 0x77, 0x6f, 0x72, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x71,
	0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72,
	0x72, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x12, 0x30, 0x0a, 0x08,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41,
	0x72, 0x72, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x12, 0x33,
	0x0a, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x41, 0x72, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x6e, 0x74, 0x41, 0x72, 0x72, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x12,
	0x30, 0x0a, 0x08, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x77, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x72, 0x48, 0x00, 0x52, 0x08, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x72, 0x12, 0x2d, 0x0a, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x12, 0x30, 0x0a, 0x08, 0x71, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x77,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x48, 0x00, 0x52, 0x08, 0x71, 0x77, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x87, 0x06, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x68, 0x64,
	0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x58, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c,
	0x65, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x44, 0x0a,
	0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0xf5, 0x02, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x56, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x6b, 0x56, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x6b, 0x56, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6b,
	0x56, 0x74, 0x43, 0x68, 0x61, 0x72, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x56, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x56, 0x74, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x56, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x56, 0x74, 0x49, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x6b, 0x56, 0x74, 0x44, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x56,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x56, 0x74, 0x51, 0x77,
	0x6f, 0x72, 0x64, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x56, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x56, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x41,
	0x72, 0x72, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x56, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x41, 0x72, 0x72, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x56, 0x74, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x72, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x56, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x41, 0x72, 0x72, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x56, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x41, 0x72, 0x72, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x56, 0x74, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x41, 0x72, 0x72, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x56, 0x74, 0x57,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x56, 0x74, 0x49,
	0x6e, 0x74, 0x41, 0x72, 0x72, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x56, 0x74, 0x44, 0x77,
	0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x56, 0x74, 0x4c,
	0x6f, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x56, 0x74, 0x51,
	0x77, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x72, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x56, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x10, 0x17, 0x2a, 0x39, 0x0a, 0x09, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x50, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x50, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x6f, 0x67, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x50, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x43, 0x6d, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x43, 0x6d, 0x4c,
	0x65, 0x61, 0x70, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x43, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x43, 0x6d, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x6b, 0x43, 0x6d, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x2a, 0xc2, 0x02, 0x0a,
	0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x6b, 0x50, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x50, 0x73,
	0x47, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x50, 0x73, 0x53, 0x68, 0x6f,
	0x77, 0x57, 0x61, 0x72, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x6b,
	0x50, 0x73, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x10, 0x15, 0x12, 0x0f, 0x0a,
	0x0b, 0x6b, 0x50, 0x73, 0x49, 0x6e, 0x61, 0x76, 0x74, 0x69, 0x76, 0x65, 0x10, 0x16, 0x12, 0x13,
	0x0a, 0x0f, 0x6b, 0x50, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x50, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d,
	0x6b, 0x50, 0x73, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x19, 0x12,
	0x10, 0x0a, 0x0c, 0x6b, 0x50, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x50, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x50, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x50, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x50, 0x73, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x51, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x50, 0x73, 0x42, 0x61,
	0x64, 0x10, 0x52, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x50, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x53, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x50, 0x73,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x54, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x50, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x10, 0x55, 0x22, 0x04, 0x08, 0x02, 0x10, 0x13, 0x22, 0x04, 0x08, 0x1c, 0x10,
	0x4f, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x77, 0x63, 0x6b, 0x6a, 0x32, 0x30, 0x32, 0x33, 0x2f, 0x63, 0x6a, 0x5f, 0x68, 0x68, 0x64, 0x62,
	0x5f, 0x67, 0x6f, 0x73, 0x64, 0x6b, 0x2f, 0x68, 0x68, 0x64, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hhdb_rpc_base_info_proto_rawDescOnce sync.Once
	file_hhdb_rpc_base_info_proto_rawDescData = file_hhdb_rpc_base_info_proto_rawDesc
)

func file_hhdb_rpc_base_info_proto_rawDescGZIP() []byte {
	file_hhdb_rpc_base_info_proto_rawDescOnce.Do(func() {
		file_hhdb_rpc_base_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_hhdb_rpc_base_info_proto_rawDescData)
	})
	return file_hhdb_rpc_base_info_proto_rawDescData
}

var file_hhdb_rpc_base_info_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_hhdb_rpc_base_info_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_hhdb_rpc_base_info_proto_goTypes = []interface{}{
	(ValueType)(0),       // 0: hhdb.rpc.ValueType
	(PointType)(0),       // 1: hhdb.rpc.PointType
	(CompressMode)(0),    // 2: hhdb.rpc.CompressMode
	(PointStatus)(0),     // 3: hhdb.rpc.PointStatus
	(*BoolArr)(nil),      // 4: hhdb.rpc.BoolArr
	(*FloatArr)(nil),     // 5: hhdb.rpc.FloatArr
	(*DoubleArr)(nil),    // 6: hhdb.rpc.DoubleArr
	(*IntArr)(nil),       // 7: hhdb.rpc.IntArr
	(*DwordArr)(nil),     // 8: hhdb.rpc.DwordArr
	(*LongArr)(nil),      // 9: hhdb.rpc.LongArr
	(*QwordArr)(nil),     // 10: hhdb.rpc.QwordArr
	(*StringArr)(nil),    // 11: hhdb.rpc.StringArr
	(*PointValue)(nil),   // 12: hhdb.rpc.PointValue
	(*PointInfo)(nil),    // 13: hhdb.rpc.PointInfo
	(*OperatorInfo)(nil), // 14: hhdb.rpc.OperatorInfo
	(*TableInfo)(nil),    // 15: hhdb.rpc.TableInfo
	nil,                  // 16: hhdb.rpc.PointInfo.ExtraFieldEntry
	nil,                  // 17: hhdb.rpc.TableInfo.ExtraFiledAndDescEntry
}
var file_hhdb_rpc_base_info_proto_depIdxs = []int32{
	4,  // 0: hhdb.rpc.PointValue.boolArr:type_name -> hhdb.rpc.BoolArr
	5,  // 1: hhdb.rpc.PointValue.floatArr:type_name -> hhdb.rpc.FloatArr
	6,  // 2: hhdb.rpc.PointValue.doubleArr:type_name -> hhdb.rpc.DoubleArr
	7,  // 3: hhdb.rpc.PointValue.intArr:type_name -> hhdb.rpc.IntArr
	8,  // 4: hhdb.rpc.PointValue.dwordArr:type_name -> hhdb.rpc.DwordArr
	9,  // 5: hhdb.rpc.PointValue.longArr:type_name -> hhdb.rpc.LongArr
	10, // 6: hhdb.rpc.PointValue.qwordArr:type_name -> hhdb.rpc.QwordArr
	11, // 7: hhdb.rpc.PointValue.stringArr:type_name -> hhdb.rpc.StringArr
	16, // 8: hhdb.rpc.PointInfo.extraField:type_name -> hhdb.rpc.PointInfo.ExtraFieldEntry
	17, // 9: hhdb.rpc.TableInfo.extraFiledAndDesc:type_name -> hhdb.rpc.TableInfo.ExtraFiledAndDescEntry
	14, // 10: hhdb.rpc.TableInfo.operatorInfo:type_name -> hhdb.rpc.OperatorInfo
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_hhdb_rpc_base_info_proto_init() }
func file_hhdb_rpc_base_info_proto_init() {
	if File_hhdb_rpc_base_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hhdb_rpc_base_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DwordArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QwordArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hhdb_rpc_base_info_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PointValue_BoolValue)(nil),
		(*PointValue_FloatValue)(nil),
		(*PointValue_DoubleValue)(nil),
		(*PointValue_IntValue)(nil),
		(*PointValue_DwordValue)(nil),
		(*PointValue_LongValue)(nil),
		(*PointValue_QwordValue)(nil),
		(*PointValue_StringValue)(nil),
		(*PointValue_BoolArr)(nil),
		(*PointValue_FloatArr)(nil),
		(*PointValue_DoubleArr)(nil),
		(*PointValue_IntArr)(nil),
		(*PointValue_DwordArr)(nil),
		(*PointValue_LongArr)(nil),
		(*PointValue_QwordArr)(nil),
		(*PointValue_StringArr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hhdb_rpc_base_info_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hhdb_rpc_base_info_proto_goTypes,
		DependencyIndexes: file_hhdb_rpc_base_info_proto_depIdxs,
		EnumInfos:         file_hhdb_rpc_base_info_proto_enumTypes,
		MessageInfos:      file_hhdb_rpc_base_info_proto_msgTypes,
	}.Build()
	File_hhdb_rpc_base_info_proto = out.File
	file_hhdb_rpc_base_info_proto_rawDesc = nil
	file_hhdb_rpc_base_info_proto_goTypes = nil
	file_hhdb_rpc_base_info_proto_depIdxs = nil
}
