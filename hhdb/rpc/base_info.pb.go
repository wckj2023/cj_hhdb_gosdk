// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: hhdb/rpc/base_info.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 数据值类型
type ValueType int32

const (
	ValueType_kVtErr    ValueType = 0 //错误类型
	ValueType_kVtBool   ValueType = 1 //bool
	ValueType_kVtFloat  ValueType = 2 //float
	ValueType_kVtDouble ValueType = 3 //double
	ValueType_kVtInt32  ValueType = 4 //int
	ValueType_kVtUint32 ValueType = 5 //unsigned int
	ValueType_kVtInt64  ValueType = 6 //long long
	ValueType_kVtUint64 ValueType = 7 //unsigned long long
	ValueType_kVtString ValueType = 8 //string
	ValueType_kVtBinary ValueType = 9 //binary
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "kVtErr",
		1: "kVtBool",
		2: "kVtFloat",
		3: "kVtDouble",
		4: "kVtInt32",
		5: "kVtUint32",
		6: "kVtInt64",
		7: "kVtUint64",
		8: "kVtString",
		9: "kVtBinary",
	}
	ValueType_value = map[string]int32{
		"kVtErr":    0,
		"kVtBool":   1,
		"kVtFloat":  2,
		"kVtDouble": 3,
		"kVtInt32":  4,
		"kVtUint32": 5,
		"kVtInt64":  6,
		"kVtUint64": 7,
		"kVtString": 8,
		"kVtBinary": 9,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_hhdb_rpc_base_info_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_hhdb_rpc_base_info_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{0}
}

// 测点类型
type PointType int32

const (
	PointType_kPtSwitch  PointType = 0 //开关量
	PointType_kPtAnalog  PointType = 1 //模拟量
	PointType_kPtControl PointType = 2 //控制点
	PointType_kPtPackage PointType = 3 //打包点
)

// Enum value maps for PointType.
var (
	PointType_name = map[int32]string{
		0: "kPtSwitch",
		1: "kPtAnalog",
		2: "kPtControl",
		3: "kPtPackage",
	}
	PointType_value = map[string]int32{
		"kPtSwitch":  0,
		"kPtAnalog":  1,
		"kPtControl": 2,
		"kPtPackage": 3,
	}
)

func (x PointType) Enum() *PointType {
	p := new(PointType)
	*p = x
	return p
}

func (x PointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointType) Descriptor() protoreflect.EnumDescriptor {
	return file_hhdb_rpc_base_info_proto_enumTypes[1].Descriptor()
}

func (PointType) Type() protoreflect.EnumType {
	return &file_hhdb_rpc_base_info_proto_enumTypes[1]
}

func (x PointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointType.Descriptor instead.
func (PointType) EnumDescriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{1}
}

// 压缩模式
type CompressMode int32

const (
	CompressMode_kCmThreshold CompressMode = 0 //无损压缩
	CompressMode_kCmLeap      CompressMode = 1 //有损压缩
	CompressMode_kCmTime      CompressMode = 2 //定时压缩
	CompressMode_kCmLoss      CompressMode = 3 //跳变
	CompressMode_kCmNone      CompressMode = 4 //阈值压缩
)

// Enum value maps for CompressMode.
var (
	CompressMode_name = map[int32]string{
		0: "kCmThreshold",
		1: "kCmLeap",
		2: "kCmTime",
		3: "kCmLoss",
		4: "kCmNone",
	}
	CompressMode_value = map[string]int32{
		"kCmThreshold": 0,
		"kCmLeap":      1,
		"kCmTime":      2,
		"kCmLoss":      3,
		"kCmNone":      4,
	}
)

func (x CompressMode) Enum() *CompressMode {
	p := new(CompressMode)
	*p = x
	return p
}

func (x CompressMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressMode) Descriptor() protoreflect.EnumDescriptor {
	return file_hhdb_rpc_base_info_proto_enumTypes[2].Descriptor()
}

func (CompressMode) Type() protoreflect.EnumType {
	return &file_hhdb_rpc_base_info_proto_enumTypes[2]
}

func (x CompressMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressMode.Descriptor instead.
func (CompressMode) EnumDescriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{2}
}

type PointStatus int32

const (
	PointStatus_kPsInit             PointStatus = 0   //初始化0-9为好的状态
	PointStatus_kPsGood             PointStatus = 1   //正常,表示测点的值是有效的且在正常范围内。这是最常见的状态
	PointStatus_kPsShowWarnning     PointStatus = 10  //>=10为警告状态
	PointStatus_kPsUncertain        PointStatus = 11  //不确定,表示测点的值可能有效，但存在某种不确定性或不可靠性。这通常用于表示数据质量差、未知状态或临时问题。
	PointStatus_kPsInavtive         PointStatus = 12  //不活动,表示测点当前处于非活动状态，可能是因为设备已停用或者该测点当前不可用。
	PointStatus_kPsQualityIssue     PointStatus = 13  //数据质量问题,表示测点的数据存在质量问题，可能是由于噪声、干扰或其他原因导致的不准确性。
	PointStatus_kPsDataTypeMisMatch PointStatus = 14  //数据类型不匹配
	PointStatus_kPsOutService       PointStatus = 15  //停用,表示测点当前处于停用状态，通常是因为设备维护或其他原因。
	PointStatus_kPsOverRange        PointStatus = 16  //超出范围,表示测点的值超出了其正常范围，通常用于指示测点的测量值超出了可接受的上限。
	PointStatus_kPsUnderRange       PointStatus = 17  //低于范围,表示测点的值低于其正常范围，通常用于指示测点的测量值低于可接受的下限。
	PointStatus_kPsShowError        PointStatus = 100 //>=100为错误状态
	PointStatus_kPsNotFound         PointStatus = 101 //错误,表示测点的值无效或处于错误状态。
	PointStatus_kPsBad              PointStatus = 102 //错误,表示测点的值无效或处于错误状态。
	PointStatus_kPsDeviceFailure    PointStatus = 106 //设备故障,表示测点所关联的设备发生故障，无法提供有效的数据。
	PointStatus_kPsSensorFailure    PointStatus = 107 //传感器故障,表示与测点关联的传感器发生故障，导致无法获得有效的测量数据。
	PointStatus_kPsCommunFailure    PointStatus = 108 //通信故障,表示测点与数据源之间的通信故障，导致无法获取或更新数据。
)

// Enum value maps for PointStatus.
var (
	PointStatus_name = map[int32]string{
		0:   "kPsInit",
		1:   "kPsGood",
		10:  "kPsShowWarnning",
		11:  "kPsUncertain",
		12:  "kPsInavtive",
		13:  "kPsQualityIssue",
		14:  "kPsDataTypeMisMatch",
		15:  "kPsOutService",
		16:  "kPsOverRange",
		17:  "kPsUnderRange",
		100: "kPsShowError",
		101: "kPsNotFound",
		102: "kPsBad",
		106: "kPsDeviceFailure",
		107: "kPsSensorFailure",
		108: "kPsCommunFailure",
	}
	PointStatus_value = map[string]int32{
		"kPsInit":             0,
		"kPsGood":             1,
		"kPsShowWarnning":     10,
		"kPsUncertain":        11,
		"kPsInavtive":         12,
		"kPsQualityIssue":     13,
		"kPsDataTypeMisMatch": 14,
		"kPsOutService":       15,
		"kPsOverRange":        16,
		"kPsUnderRange":       17,
		"kPsShowError":        100,
		"kPsNotFound":         101,
		"kPsBad":              102,
		"kPsDeviceFailure":    106,
		"kPsSensorFailure":    107,
		"kPsCommunFailure":    108,
	}
)

func (x PointStatus) Enum() *PointStatus {
	p := new(PointStatus)
	*p = x
	return p
}

func (x PointStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hhdb_rpc_base_info_proto_enumTypes[3].Descriptor()
}

func (PointStatus) Type() protoreflect.EnumType {
	return &file_hhdb_rpc_base_info_proto_enumTypes[3]
}

func (x PointStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointStatus.Descriptor instead.
func (PointStatus) EnumDescriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{3}
}

// 测点数据
type PointValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*PointValue_BoolValue
	//	*PointValue_FloatValue
	//	*PointValue_DoubleValue
	//	*PointValue_Int32Value
	//	*PointValue_Uint32Value
	//	*PointValue_Int64Value
	//	*PointValue_Uint64Value
	//	*PointValue_StringValue
	//	*PointValue_BinaryValue
	Value isPointValue_Value `protobuf_oneof:"value"`
}

func (x *PointValue) Reset() {
	*x = PointValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointValue) ProtoMessage() {}

func (x *PointValue) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointValue.ProtoReflect.Descriptor instead.
func (*PointValue) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{0}
}

func (m *PointValue) GetValue() isPointValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PointValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*PointValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *PointValue) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*PointValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *PointValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*PointValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *PointValue) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*PointValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *PointValue) GetUint32Value() uint32 {
	if x, ok := x.GetValue().(*PointValue_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *PointValue) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*PointValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *PointValue) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*PointValue_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *PointValue) GetStringValue() string {
	if x, ok := x.GetValue().(*PointValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *PointValue) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*PointValue_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

type isPointValue_Value interface {
	isPointValue_Value()
}

type PointValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=boolValue,proto3,oneof"`
}

type PointValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=floatValue,proto3,oneof"`
}

type PointValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=doubleValue,proto3,oneof"`
}

type PointValue_Int32Value struct {
	Int32Value int32 `protobuf:"varint,4,opt,name=int32Value,proto3,oneof"`
}

type PointValue_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,5,opt,name=uint32Value,proto3,oneof"`
}

type PointValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,6,opt,name=int64Value,proto3,oneof"`
}

type PointValue_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,7,opt,name=uint64Value,proto3,oneof"`
}

type PointValue_StringValue struct {
	StringValue string `protobuf:"bytes,8,opt,name=stringValue,proto3,oneof"`
}

type PointValue_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,9,opt,name=binaryValue,proto3,oneof"`
}

func (*PointValue_BoolValue) isPointValue_Value() {}

func (*PointValue_FloatValue) isPointValue_Value() {}

func (*PointValue_DoubleValue) isPointValue_Value() {}

func (*PointValue_Int32Value) isPointValue_Value() {}

func (*PointValue_Uint32Value) isPointValue_Value() {}

func (*PointValue_Int64Value) isPointValue_Value() {}

func (*PointValue_Uint64Value) isPointValue_Value() {}

func (*PointValue_StringValue) isPointValue_Value() {}

func (*PointValue_BinaryValue) isPointValue_Value() {}

type PointShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointName string    `protobuf:"bytes,1,opt,name=pointName,proto3" json:"pointName,omitempty"`                          //测点名
	PointUnit string    `protobuf:"bytes,2,opt,name=pointUnit,proto3" json:"pointUnit,omitempty"`                          //测点单位
	PointDesc string    `protobuf:"bytes,3,opt,name=pointDesc,proto3" json:"pointDesc,omitempty"`                          //测点描述
	PointType PointType `protobuf:"varint,4,opt,name=pointType,proto3,enum=hhdb.rpc.PointType" json:"pointType,omitempty"` //测点类型
}

func (x *PointShowInfo) Reset() {
	*x = PointShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointShowInfo) ProtoMessage() {}

func (x *PointShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointShowInfo.ProtoReflect.Descriptor instead.
func (*PointShowInfo) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{1}
}

func (x *PointShowInfo) GetPointName() string {
	if x != nil {
		return x.PointName
	}
	return ""
}

func (x *PointShowInfo) GetPointUnit() string {
	if x != nil {
		return x.PointUnit
	}
	return ""
}

func (x *PointShowInfo) GetPointDesc() string {
	if x != nil {
		return x.PointDesc
	}
	return ""
}

func (x *PointShowInfo) GetPointType() PointType {
	if x != nil {
		return x.PointType
	}
	return PointType_kPtSwitch
}

// 测点全量信息
type PointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointId        int32             `protobuf:"varint,1,opt,name=pointId,proto3" json:"pointId,omitempty"`                                                                                               //测点ID，为>=0的整数
	ShowInfo       *PointShowInfo    `protobuf:"bytes,2,opt,name=showInfo,proto3" json:"showInfo,omitempty"`                                                                                              //测点基础信息
	CompressMode   CompressMode      `protobuf:"varint,3,opt,name=compressMode,proto3,enum=hhdb.rpc.CompressMode" json:"compressMode,omitempty"`                                                          //压缩模式
	CompressParam1 float64           `protobuf:"fixed64,4,opt,name=compressParam1,proto3" json:"compressParam1,omitempty"`                                                                                //压缩备用参数1
	CompressParam2 float64           `protobuf:"fixed64,5,opt,name=compressParam2,proto3" json:"compressParam2,omitempty"`                                                                                //压缩备用参数2
	OuttimeFlag    bool              `protobuf:"varint,6,opt,name=outtimeFlag,proto3" json:"outtimeFlag,omitempty"`                                                                                       //是否设置数据超时自动删除
	OuttimeDay     int32             `protobuf:"varint,7,opt,name=outtimeDay,proto3" json:"outtimeDay,omitempty"`                                                                                         //超时时间（单位：天）
	ValueType      ValueType         `protobuf:"varint,8,opt,name=valueType,proto3,enum=hhdb.rpc.ValueType" json:"valueType,omitempty"`                                                                   //测点值类型
	TableId        int32             `protobuf:"varint,9,opt,name=tableId,proto3" json:"tableId,omitempty"`                                                                                               //点组ID
	CreateTime     uint64            `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`                                                                                        //测点创建时间
	ExtraField     map[string]string `protobuf:"bytes,11,rep,name=extraField,proto3" json:"extraField,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //自定义的拓展字段
}

func (x *PointInfo) Reset() {
	*x = PointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointInfo) ProtoMessage() {}

func (x *PointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointInfo.ProtoReflect.Descriptor instead.
func (*PointInfo) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{2}
}

func (x *PointInfo) GetPointId() int32 {
	if x != nil {
		return x.PointId
	}
	return 0
}

func (x *PointInfo) GetShowInfo() *PointShowInfo {
	if x != nil {
		return x.ShowInfo
	}
	return nil
}

func (x *PointInfo) GetCompressMode() CompressMode {
	if x != nil {
		return x.CompressMode
	}
	return CompressMode_kCmThreshold
}

func (x *PointInfo) GetCompressParam1() float64 {
	if x != nil {
		return x.CompressParam1
	}
	return 0
}

func (x *PointInfo) GetCompressParam2() float64 {
	if x != nil {
		return x.CompressParam2
	}
	return 0
}

func (x *PointInfo) GetOuttimeFlag() bool {
	if x != nil {
		return x.OuttimeFlag
	}
	return false
}

func (x *PointInfo) GetOuttimeDay() int32 {
	if x != nil {
		return x.OuttimeDay
	}
	return 0
}

func (x *PointInfo) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_kVtErr
}

func (x *PointInfo) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *PointInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PointInfo) GetExtraField() map[string]string {
	if x != nil {
		return x.ExtraField
	}
	return nil
}

type OperatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime   uint64 `protobuf:"varint,1,opt,name=createTime,proto3" json:"createTime,omitempty"`     //数据库创建时间
	UpdateTime   uint64 `protobuf:"varint,2,opt,name=updateTime,proto3" json:"updateTime,omitempty"`     //数据库最后更新时间
	CreateUserId uint32 `protobuf:"varint,3,opt,name=createUserId,proto3" json:"createUserId,omitempty"` //创建作者信息
	UpdateUserId uint32 `protobuf:"varint,4,opt,name=updateUserId,proto3" json:"updateUserId,omitempty"` //更新作者信息
}

func (x *OperatorInfo) Reset() {
	*x = OperatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorInfo) ProtoMessage() {}

func (x *OperatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorInfo.ProtoReflect.Descriptor instead.
func (*OperatorInfo) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{3}
}

func (x *OperatorInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *OperatorInfo) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *OperatorInfo) GetCreateUserId() uint32 {
	if x != nil {
		return x.CreateUserId
	}
	return 0
}

func (x *OperatorInfo) GetUpdateUserId() uint32 {
	if x != nil {
		return x.UpdateUserId
	}
	return 0
}

// 点组信息
type TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId           int32             `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`                                                                                                            //表ID
	TableName         string            `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`                                                                                                         //表名
	ExtraFiledAndDesc map[string]string `protobuf:"bytes,3,rep,name=extraFiledAndDesc,proto3" json:"extraFiledAndDesc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //表中其他列的属性
	OperatorInfo      *OperatorInfo     `protobuf:"bytes,4,opt,name=operatorInfo,proto3" json:"operatorInfo,omitempty"`                                                                                                   //用户操作信息
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hhdb_rpc_base_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hhdb_rpc_base_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_hhdb_rpc_base_info_proto_rawDescGZIP(), []int{4}
}

func (x *TableInfo) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TableInfo) GetExtraFiledAndDesc() map[string]string {
	if x != nil {
		return x.ExtraFiledAndDesc
	}
	return nil
}

func (x *TableInfo) GetOperatorInfo() *OperatorInfo {
	if x != nil {
		return x.OperatorInfo
	}
	return nil
}

var File_hhdb_rpc_base_info_proto protoreflect.FileDescriptor

var file_hhdb_rpc_base_info_proto_rawDesc = []byte{
	0x0a, 0x18, 0x68, 0x68, 0x64, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x68, 0x64, 0x62,
	0x2e, 0x72, 0x70, 0x63, 0x22, 0xcf, 0x02, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x22, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79,
	0x12, 0x31, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x09, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x58, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x68,
	0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x68, 0x68, 0x64, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x44, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46,
	0x69, 0x6c, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x99, 0x01, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x56,
	0x74, 0x45, 0x72, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x56, 0x74, 0x42, 0x6f, 0x6f,
	0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x56, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x56, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x56, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x6b, 0x56, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x6b, 0x56, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x6b,
	0x56, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x56,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x56, 0x74,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x09, 0x2a, 0x49, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x50, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x50, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x50, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x50, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x10, 0x03, 0x2a, 0x54, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x43, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x43, 0x6d, 0x4c, 0x65, 0x61, 0x70,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x43, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x6b, 0x43, 0x6d, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x6b, 0x43, 0x6d, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x2a, 0xc2, 0x02, 0x0a, 0x0b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x50, 0x73,
	0x49, 0x6e, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x50, 0x73, 0x47, 0x6f, 0x6f,
	0x64, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x50, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x61,
	0x72, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x50, 0x73, 0x55,
	0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x50,
	0x73, 0x49, 0x6e, 0x61, 0x76, 0x74, 0x69, 0x76, 0x65, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x6b,
	0x50, 0x73, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x10, 0x0d,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x50, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x50, 0x73,
	0x4f, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c,
	0x6b, 0x50, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x10, 0x12, 0x11,
	0x0a, 0x0d, 0x6b, 0x50, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x11, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x50, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x50, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x50, 0x73, 0x42, 0x61, 0x64, 0x10, 0x66,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x50, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x10, 0x6a, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x50, 0x73, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x6b, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x50, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0x6c, 0x22, 0x04, 0x08, 0x02, 0x10, 0x09, 0x22, 0x04, 0x08, 0x12, 0x10, 0x63, 0x42, 0x07,
	0x5a, 0x05, 0x2e, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hhdb_rpc_base_info_proto_rawDescOnce sync.Once
	file_hhdb_rpc_base_info_proto_rawDescData = file_hhdb_rpc_base_info_proto_rawDesc
)

func file_hhdb_rpc_base_info_proto_rawDescGZIP() []byte {
	file_hhdb_rpc_base_info_proto_rawDescOnce.Do(func() {
		file_hhdb_rpc_base_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_hhdb_rpc_base_info_proto_rawDescData)
	})
	return file_hhdb_rpc_base_info_proto_rawDescData
}

var file_hhdb_rpc_base_info_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_hhdb_rpc_base_info_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_hhdb_rpc_base_info_proto_goTypes = []interface{}{
	(ValueType)(0),        // 0: hhdb.rpc.ValueType
	(PointType)(0),        // 1: hhdb.rpc.PointType
	(CompressMode)(0),     // 2: hhdb.rpc.CompressMode
	(PointStatus)(0),      // 3: hhdb.rpc.PointStatus
	(*PointValue)(nil),    // 4: hhdb.rpc.PointValue
	(*PointShowInfo)(nil), // 5: hhdb.rpc.PointShowInfo
	(*PointInfo)(nil),     // 6: hhdb.rpc.PointInfo
	(*OperatorInfo)(nil),  // 7: hhdb.rpc.OperatorInfo
	(*TableInfo)(nil),     // 8: hhdb.rpc.TableInfo
	nil,                   // 9: hhdb.rpc.PointInfo.ExtraFieldEntry
	nil,                   // 10: hhdb.rpc.TableInfo.ExtraFiledAndDescEntry
}
var file_hhdb_rpc_base_info_proto_depIdxs = []int32{
	1,  // 0: hhdb.rpc.PointShowInfo.pointType:type_name -> hhdb.rpc.PointType
	5,  // 1: hhdb.rpc.PointInfo.showInfo:type_name -> hhdb.rpc.PointShowInfo
	2,  // 2: hhdb.rpc.PointInfo.compressMode:type_name -> hhdb.rpc.CompressMode
	0,  // 3: hhdb.rpc.PointInfo.valueType:type_name -> hhdb.rpc.ValueType
	9,  // 4: hhdb.rpc.PointInfo.extraField:type_name -> hhdb.rpc.PointInfo.ExtraFieldEntry
	10, // 5: hhdb.rpc.TableInfo.extraFiledAndDesc:type_name -> hhdb.rpc.TableInfo.ExtraFiledAndDescEntry
	7,  // 6: hhdb.rpc.TableInfo.operatorInfo:type_name -> hhdb.rpc.OperatorInfo
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_hhdb_rpc_base_info_proto_init() }
func file_hhdb_rpc_base_info_proto_init() {
	if File_hhdb_rpc_base_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hhdb_rpc_base_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hhdb_rpc_base_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hhdb_rpc_base_info_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PointValue_BoolValue)(nil),
		(*PointValue_FloatValue)(nil),
		(*PointValue_DoubleValue)(nil),
		(*PointValue_Int32Value)(nil),
		(*PointValue_Uint32Value)(nil),
		(*PointValue_Int64Value)(nil),
		(*PointValue_Uint64Value)(nil),
		(*PointValue_StringValue)(nil),
		(*PointValue_BinaryValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hhdb_rpc_base_info_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hhdb_rpc_base_info_proto_goTypes,
		DependencyIndexes: file_hhdb_rpc_base_info_proto_depIdxs,
		EnumInfos:         file_hhdb_rpc_base_info_proto_enumTypes,
		MessageInfos:      file_hhdb_rpc_base_info_proto_msgTypes,
	}.Build()
	File_hhdb_rpc_base_info_proto = out.File
	file_hhdb_rpc_base_info_proto_rawDesc = nil
	file_hhdb_rpc_base_info_proto_goTypes = nil
	file_hhdb_rpc_base_info_proto_depIdxs = nil
}
